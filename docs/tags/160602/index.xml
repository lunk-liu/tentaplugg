<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>160602 on TDDD38 tentaplugg #5</title>
    <link>https://lunk-liu.github.io/tentaplugg/tags/160602/</link>
    <description>Recent content in 160602 on TDDD38 tentaplugg #5</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lunk-liu.github.io/tentaplugg/tags/160602/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fråga 1</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/1/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/1/</guid>
      <description>&lt;p&gt;Give one code example of where the compiler uses ADL for name lookup.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 2</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/2/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/2/</guid>
      <description>&lt;p&gt;Give, with either text or a short (1-5 simple statements each) code example, two examples of undefined behavior.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 3</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/3/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/3/</guid>
      <description>&lt;p&gt;Why should you prefer usage of the free function &lt;code&gt;std::begin&lt;/code&gt; instead of using the member function?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 4</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/4/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/4/</guid>
      <description>&lt;p&gt;What is the difference between implementation defined behavior and undefined behavior?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 5</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/5/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/5/</guid>
      <description>&lt;p&gt;What is meant by the zero-overhead rule?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 6</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/upg6/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/upg6/</guid>
      <description>Copy the file assignment6.cc from given_files and make additions to your copy. Submit your solution as Assignment #6. There is a built-in problem with some of the integral types, int in particular, in that we get undefined beavior when going outside the range of the type. Your task in this assignment is to create a type Modular that is templated on the internal storage type and the value range (given as two template non-type parameters).</description>
    </item>
    
    <item>
      <title>Programmeringsuppgift 7</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/upg7/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/upg7/</guid>
      <description>Copy the file assignment7.cc from given_files and make additions to your copy. Submit your solution as Assignment #7.
In this exercise, it’s extra important for you to use the standard library in a good way. To get full marks, use the correct algorithm for the given task – for_each is not a valid solution for all tasks and you won’t need any hand-rolled loops.
The given file has a simple function to test if a value is a prime number and a simple type alias called num_type.</description>
    </item>
    
    <item>
      <title>Programmeringsuppgift 7</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/160602/upg8/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/160602/upg8/</guid>
      <description>Copy assignment8.cc from given_files to your working directory. Add your own code according to instructions below and submit as Assignment #8.
The following function for sorting int values in range [begin, end) is given:
void sort(int* begin, int* end) { for ( ; begin +1 != end; ++begin) { int* min = begin; for (int* pos = begin + 1; pos != end; ++pos) if (*pos &amp;lt; *min) min = pos; std::iter_swap(begin, min); } }  It could be used as follows for sorting the elements of an array:</description>
    </item>
    
  </channel>
</rss>