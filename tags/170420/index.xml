<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>170420 on Minimal</title>
    <link>https://lunk-liu.github.io/tentaplugg/tags/170420/</link>
    <description>Recent content in 170420 on Minimal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lunk-liu.github.io/tentaplugg/tags/170420/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fråga 1</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/170420/1/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/170420/1/</guid>
      <description>&lt;p&gt;Given the following snippet of code, give a reason for having the using declaration on line
4 instead of qualifying the call on line 5 (i.e. return &lt;strong&gt;std::begin(range)&lt;/strong&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;typename Range &amp;gt;
auto iter( Range &amp;amp;&amp;amp; range )
{
    using std :: begin ;
    return begin ( range ); // line 5
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 2</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/170420/2/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/170420/2/</guid>
      <description>&lt;p&gt;Given the following primary template declaration, give a declaration of a specialization of
&lt;strong&gt;foo&lt;/strong&gt; for type &lt;strong&gt;char&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt;
struct foo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 3</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/170420/3/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/170420/3/</guid>
      <description>&lt;p&gt;Assuming v is a &lt;strong&gt;std::vector&amp;lt;int&amp;gt;&lt;/strong&gt;, why is the following code wrong?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static_assert (v.size () &amp;gt; 0, &amp;quot; vector is empty !&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fråga 4</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/170420/4/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/170420/4/</guid>
      <description>Assume you have definitions for the following functions:
void fun(int , short ); void fun(int , double );  The call fun(2,3) will give an ambiguous overload. Why?
Answer: The problem is (of course) due to type conversions. An int can be implicitly converted to both double and short and both will give possible loss of precision.</description>
    </item>
    
    <item>
      <title>Fråga 5</title>
      <link>https://lunk-liu.github.io/tentaplugg/post/170420/5/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lunk-liu.github.io/tentaplugg/post/170420/5/</guid>
      <description>&lt;p&gt;Describe what length below does and give a valid example of a call to length.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;typename ... Args &amp;gt;
int length (Args &amp;amp;&amp;amp; ... args)
{
    return sizeof ...( args );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>